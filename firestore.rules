/**
 * @fileoverview Firestore Security Rules for Sieve Analysis App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model, where users can only access their own user documents and the tests they have created.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The document ID is the Firebase Auth UID.
 * - /tests/{testId}: Stores sieve analysis test data.  Each test document has a `userId` field indicating the owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Tests are owned by a user, and only that user can read, update, or delete them.
 * - Listing all users is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 * The `Test` entity includes a `userId` field to simplify ownership checks and avoid costly `get()` operations to the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read profile of 'user_abc'.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to test documents.
     * @path /tests/{testId}
     * @allow (create) User with UID 'user_abc' can create a test with userId: 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a test where test.userId == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a test where test.userId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a test where test.userId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a test for userId: 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot read a test where test.userId == 'user_abc'.
     * @principle Enforces user-ownership for test documents based on the userId field.
     */
    match /tests/{testId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}